#!/bin/bash
#set -x
##########################################################
# Validates the commit message with the following rules: #
# 1. The message cannot be empty                         #
# 2. In dev branch, the format must follow the standard  #
# 3. In main branch, the related JIRA issue needs to be  #
#     mentioned before the standard message format       #
##########################################################

source .githooks/config.sh
# shopt -s nocasematch  # Case insensitive Cases
COMMIT_MSG_FILE=$1      # Recieve the commit message .git/COMMIT_EDITMSG

if [[ -z $(grep '[^[:space:]]' $COMMIT_MSG_FILE) ]] ; then
    echo "Empty commit message is not allowed" >&2
    exit 1
fi

DEV_BRANCH="dev"
MAIN_BRANCH="main"

current_branch="$(git rev-parse --abbrev-ref HEAD)"

case "$current_branch" in
$DEV_BRANCH)
    error_msg="Aborting commit. Please use the following format: <Imperative verb> <short description of change>"
    commit_regex_string="^${IMPERATIVE_VERBS} [A-Za-z0-9 \/\'\,\._-]+$"
    ;;

$MAIN_BRANCH)
    error_msg="Aborting commit. Please prefix JIRA issue (${JIRA_TAG}-XXXX) and a verb ${IMPERATIVE_VERBS} to the commit message."
    commit_regex_string="^${JIRA_TAG}-[0-9]+ ${IMPERATIVE_VERBS} .*$"
    ;;

\
    *)
    error_msg="Aborting commit. Please prefix JIRA issue (${JIRA_TAG}-XXXX) and a verb ${IMPERATIVE_VERBS} to the commit message."
    commit_regex_string="^${JIRA_TAG}-[0-9]+ ${IMPERATIVE_VERBS} .*$"
    ;;
esac

COMMIT_MSG=$(cat ${COMMIT_MSG_FILE})
if [[ ! $COMMIT_MSG =~ $commit_regex_string ]]; then
    echo "$error_msg"
    exit 1
fi

exit 0
