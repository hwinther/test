name: "Playwright e2e tests"

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        required: true
        type: string
        description: prod|qa|test|dev
      repo_name:
        required: true
        type: string
        description: main|qa|test|dev (repo name defined separate because main maps to prod)
      url_prefix:
        required: true
        type: string
        description: (empty)|qa-|test-|dev-
  workflow_call:
    inputs:
      deploy_target:
        required: true
        type: string
        description: prod|qa|test|dev
      repo_name:
        required: true
        type: string
        description: main|qa|test|dev (repo name defined separate because main maps to prod)
      url_prefix:
        required: true
        type: string
        description: (empty)|qa-|test-|dev-

env:
  NODE_VERSION: "20"
  WORKFLOW_SHORT_NAME: "test-e2e"
  PLAYWRIGHT_PATH: "tests/playwright"
  TRAILING_AGENT_WORK_PATH: "/home/runner/work/test/test/"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    defaults:
      run:
        working-directory: ${{ env.PLAYWRIGHT_PATH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ./.github/actions/frontend-build
        with:
          working_directory: ${{ env.PLAYWRIGHT_PATH }}

  run-e2e-tests:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'pull_request' && github.event.pull_request.draft == false) || contains(github.ref, inputs.repo_name) }}
    needs: ["build"]
    timeout-minutes: 60
    defaults:
      run:
        working-directory: ${{ env.PLAYWRIGHT_PATH }}
    environment: ${{ inputs.deploy_target }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        name: Setup node (yarn)
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"
          cache-dependency-path: "${{ env.PLAYWRIGHT_PATH }}/yarn.lock"

      - name: Get API token and set environment variables
        run: |
          TOKEN=$(curl ${{ secrets.UIDP_AUTHORITY }}/connect/token -H "Content-Type: application/x-www-form-urlencoded" --data "grant_type=client_credentials&client_id=${{ secrets.API_TEST_CLIENT_ID }}&client_secret=${{ secrets.API_TEST_CLIENT_SECRET }}&scope=${{ secrets.API_TEST_CLIENT_SCOPE }}" | jq -j '.access_token')
          echo "setting API_TOKEN=$(echo ${TOKEN})"
          echo "API_TOKEN=$(echo ${TOKEN})" >> $GITHUB_ENV

      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache

      - name: Get installed Playwright version
        id: playwright-version
        run: |
          echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")" >> $GITHUB_ENV
          echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")" >> $GITHUB_OUTPUT
          echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")"
      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.PLAYWRIGHT_VERSION }}
      - run: yarn playwright install --with-deps # npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - run: yarn playwright install-deps # npx playwright install-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Run Playwright tests
        env:
          API_URL: https://${{ inputs.url_prefix }}web-api.test.no
        run: |
          echo "Using API_URL: $API_URL"
          yarn playwright test
          # npx playwright test

      - uses: daun/playwright-report-summary@v3
        if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target' || github.event_name == 'push') && always() }}
        id: playwright-report-summary
        with:
          report-file: "${{ env.PLAYWRIGHT_PATH }}/playwright-report/results.json"
          comment-title: "Playwright results"
          job-summary: true
          icon-style: "emojis"

      # - name: Convert markdown to slack format
      #   uses: denis-trofimov/slackify-markdown-action@v1.0.0
      #   if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target' || github.event_name == 'push') && always() }}
      #   id: slackify-markdown
      #   with:
      #     text: ${{ steps.playwright-report-summary.outputs.summary }}

      # - name: Send custom JSON data to Slack workflow
      #   if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target' || github.event_name == 'push') && always() }}
      #   id: slack
      #   uses: slackapi/slack-github-action@v1.25.0
      #   with:
      #     payload: |
      #       {
      #         "message": "${{ steps.slackify-markdown.outputs.text }}",
      #         "deploy_target": "${{ inputs.deploy_target }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: ${{ env.PLAYWRIGHT_PATH }}/playwright-report/
          retention-days: 30
